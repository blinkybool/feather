"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[704],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=s(t),u=o,m=h["".concat(p,".").concat(u)]||h[u]||c[u]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},12919:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:3},i="Optimising",l={unversionedId:"Optimising",id:"Optimising",title:"Optimising",description:"Suppose we want to animate something on a pixel-based canvas made of parts.",source:"@site/docs/Optimising.md",sourceDirName:".",slug:"/Optimising",permalink:"/feather/docs/Optimising",draft:!1,editUrl:"https://github.com/blinkybool/feather/edit/main/docs/Optimising.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Key Differences to Roact",permalink:"/feather/docs/KeyDifferences-Roact"},next:{title:"Why Use Feather?",permalink:"/feather/docs/WhyUseFeather"}},p={},s=[{value:"OldProps + DeltaChildren",id:"oldprops--deltachildren",level:2},{value:"HostInitProps",id:"hostinitprops",level:2},{value:"BulkMoveCFrame",id:"bulkmovecframe",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"optimising"},"Optimising"),(0,o.kt)("p",null,"Suppose we want to animate something on a pixel-based canvas made of parts."),(0,o.kt)("p",null,"With no optimisation, it could look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local e = Feather.createElement\n\nreturn function(props)\n\n    local children = {}\n\n    local pixelSize = props.Width/props.Res\n\n    for i=1, props.Res do\n\n        for j=1, props.Res do\n            \n            local key = (j-1) * props.Res + i\n\n            children[key] = e("Part", {\n        \n                Color = props.Grid[key] or Color3.new(0,0,0),\n\n                Size = Vector3.new(pixelSize, 1, pixelSize),\n                CFrame = CFrame.new((i - 0.5)* pixelSize, 0.5, (j-0.5) * pixelSize),\n        \n                Material = Enum.Material.Neon,\n                TopSurface = Enum.SurfaceType.Smooth,\n                BottomSurface = Enum.SurfaceType.Smooth,\n                Anchored = true,\n            })\n        end\n    end\n\n    return e("Model", {\n\n        [Feather.Children] = children\n    })\nend\n')),(0,o.kt)("p",null,"The problem with this component is that every time we call update (maybe every Heartbeat), Feather will update 7 properties of every single pixel part, even if none have changed."),(0,o.kt)("h2",{id:"oldprops--deltachildren"},"OldProps + DeltaChildren"),(0,o.kt)("p",null,"Function components can take a second argument, to which Feather passes the stored props of the last update\nto that component. We can use this to check if the color of a particular pixel has changed or not."),(0,o.kt)("p",null,"Then how do we tell Feather which children to update?"),(0,o.kt)("p",null,"Instead of passing the table of all children to the ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#Children"},"Feather.Children"),", we can pass the table of changed-children to ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#DeltaChildren"},"Feather.DeltaChildren"),". Existing children that are missing from this table will not be destroyed as instances (like they would with Feather.Children)."),(0,o.kt)("p",null,"Our improved component looks like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local e = Feather.createElement\n\nreturn function(props, oldProps)\n\n    local deltaChildren = {}\n\n    local pixelSize = props.Width/props.Res\n\n    local oldGrid = oldProps.Grid\n\n    local updateAll =\n        not oldGrid\n        or props.Width ~= oldProps.Width\n        or props.Res ~= oldProps.Res\n\n    for i=1, props.Res do\n\n        for j=1, props.Res do\n            \n            local key = (j-1) * props.Res + i\n\n            if not oldGrid or props.Grid[key] ~= oldProps.Grid[key] then\n                \n                deltaChildren[key] = e("Part", {\n            \n                    Color = props.Grid[key] or Color3.new(0,0,0),\n\n                    Size = Vector3.new(pixelSize, 1, pixelSize),\n                    CFrame = CFrame.new((i - 0.5)* pixelSize, 0.5, (j-0.5) * pixelSize),\n            \n                    Material = Enum.Material.Neon,\n                    TopSurface = Enum.SurfaceType.Smooth,\n                    BottomSurface = Enum.SurfaceType.Smooth,\n                    Anchored = true,\n                })\n            end\n        end\n    end\n\n    return e("Model", {\n\n        [Feather.DeltaChildren] = deltaChildren\n    })\nend\n')),(0,o.kt)("p",null,"It is still possible to remove children when using ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#DeltaChildren"},"Feather.DeltaChildren"),". Just set their value to the special symbol ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#SubtractChild"},"Feather.SubtractChild")," in the delta children table."),(0,o.kt)("h2",{id:"hostinitprops"},"HostInitProps"),(0,o.kt)("p",null,"There are often properties of hosts that ",(0,o.kt)("em",{parentName:"p"},"never")," change with any update, and\nonly need to be set when the instance is first created. While it's possible\nto deduce whether a host already exists via oldProps, it's much easier to use\nthe special key ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#HostInitProps"},"Feather.HostInitProps")," to gather any props that should only be set when the instance is first created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local e = Feather.createElement\n\nlocal partInitProps = {\n\n    Material = Enum.Material.Neon,\n    TopSurface = Enum.SurfaceType.Smooth,\n    BottomSurface = Enum.SurfaceType.Smooth,\n    Anchored = true,\n}\n\nreturn function(props, oldProps)\n\n    local deltaChildren = {}\n\n    local pixelSize = props.Width / props.Res\n\n    local oldGrid = oldProps.Grid\n\n    local updateAll =\n        not oldGrid\n        or props.Width ~= oldProps.Width\n        or props.Res ~= oldProps.Res\n\n    for i=1, props.Res do\n\n        for j=1, props.Res do\n            \n            local key = (j-1) * props.Res + i\n\n            if updateAll or props.Grid[key] ~= oldProps.Grid[key] then\n                \n                deltaChildren[key] = e("Part", {\n            \n                    Color = props.Grid[key] or Color3.new(0,0,0),\n\n                    Size = Vector3.new(pixelSize, 1, pixelSize),\n                    CFrame = CFrame.new((i - 0.5)* pixelSize, 0.5, (j-0.5) * pixelSize),\n            \n                    [Feather.HostInitProps] = partInitProps,\n                })\n            end\n        end\n    end\n\n    return e("Model", {\n\n        [Feather.DeltaChildren] = deltaChildren\n    })\nend\n')),(0,o.kt)("h2",{id:"bulkmovecframe"},"BulkMoveCFrame"),(0,o.kt)("p",null,"If you are moving lots of BaseParts, you can use the special key ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#BulkMoveCFrame"},"Feather.BulkMoveCFrame"),", instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"CFrame")," for better performance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local function sphere(props)\n\n    return e("Part", {\n\n        [Feather.BulkMoveCFrame] = CFrame.new(props.Position),\n\n        Size = Vector3.new(props.Diameter, props.Diameter, props.Diameter),\n        Color = props.Color,\n\n        Anchored = true,\n    })\nend\n')),(0,o.kt)("p",null,"When running ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#update"},"Feather.update")," or ",(0,o.kt)("a",{parentName:"p",href:"/api/Feather#mount"},"Feather.mount"),", Feather will use ",(0,o.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/WorldRoot#BulkMoveTo"},"WorldRoot:BulkMoveTo()")," on all of the parts with this prop, instead of individually cframing every part during the update."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/WorldRoot#BulkMoveTo"},"WorldRoot:BulkMoveTo()")," is called with ",(0,o.kt)("inlineCode",{parentName:"p"},"Enum.BulkMoveTo.FireCFrameChanged"),", so Position/Orientation Changed events will ",(0,o.kt)("strong",{parentName:"p"},"not")," fire.")))}c.isMDXComponent=!0}}]);